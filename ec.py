#!/usr/bin/env python3
#  mgorski
#  28.07.2022

import numpy
from scipy.stats import norm


class TelInstrument():

# aperure = 2 * seeing
# add other filters (I,J,H,K, colors J-K)
# add camera eficiency
      
      def __init__(self,parent=None):
          # telescope parameters
          self.mirror=1.5
          
          # instrument parameters
          self.pixsize=0.07         # arcsec
          self.dark = 0.5          # ADU / pix / s
          self.readoutnoise = 5.
          self.minseeing = 0.05

          # conditions
          self.seeing=0.08           # arcsec
          self.background_V = 20.   # ADU / pix / s
          
          # star parameters
          self.V=20
          self.VI=1.0
          
          # exposure conditions
          self.exp_time = 100.0        
          self.StN = False
      
      def calc(self):
          if self.seeing<self.minseeing: self.seeing=self.minseeing 
          self.background=self.background_V
          self.m = self.V
          self.radiation= 4500   # main coefficient of star radiation per second 
          
          # background generated by one pixel
          coe_pixSize = (self.pixsize/0.1)**2.   # pixel size coefficient for sky background
          self.backgroundPix_ADU = (self.dark + coe_pixSize*self.background) * self.exp_time # background per pixel * time
          self.background_ADU = self.backgroundPix_ADU * (3.14*2*self.seeing / self.pixsize) ** 2 # bckground * number of pixels 
     
          # Total ADU from star blured over 2 * seeing (aperture)
          coe_brightness = 10**((15.-self.m)/2.5)    # star brighteness coefficicient
          coe_mirror = (self.mirror*self.mirror) / 1.0   # mirror size coefficient 
          self.star_ADU = self.radiation * coe_brightness * coe_mirror * self.exp_time
          
          # noise ADU
          self.noise_ADU = (self.star_ADU+self.background_ADU) ** 0.5 + self.readoutnoise

          # signal to noise
          self.StN = self.star_ADU / self.noise_ADU
          
          # central pixel signal background_ADU
          # fwhm (seeing) = 2.355 * sigma
          coe_sigma = self.pixsize / (self.seeing/2.355) 
          coe_norm = norm.cdf(coe_sigma)-norm.cdf(-1*coe_sigma) 
          self.centrPixADU = self.backgroundPix_ADU + coe_norm * self.star_ADU
          
          print(self.StN)
          print(self.centrPixADU)
          
DibiImg = TelInstrument()
DibiImg.calc()
